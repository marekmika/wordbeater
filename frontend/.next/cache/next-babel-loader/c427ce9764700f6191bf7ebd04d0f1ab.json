{"ast":null,"code":"var _jsxFileName = \"/app/components/GameInfo/GameInfo.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { useIsGameProgress } from '../../hooks/useIsGameInProgress';\nimport { useScoreSelector, useTimeSelector } from '../../redux/reducers/game';\nimport { decreaseTimeAction, setIsUserPlayingAction, gameOverAction } from '../../redux/actions/gameActions';\nconst ONE_SECOND = 1000;\n\nconst GameInfo = () => {\n  const dispatch = useDispatch();\n  const score = useScoreSelector();\n  const time = useTimeSelector();\n  const isGameInProgress = useIsGameProgress();\n  const {\n    0: intervalId,\n    1: setIntervalId\n  } = useState(null);\n\n  const discreaseTime = () => {\n    if (score === 0) {\n      dispatch(gameOverAction());\n    }\n\n    dispatch(decreaseTimeAction());\n  };\n\n  useEffect(() => {\n    if (!isGameInProgress) {\n      clearInterval(intervalId);\n      dispatch(setIsUserPlayingAction(false));\n      return;\n    }\n\n    setIntervalId(setInterval(discreaseTime, ONE_SECOND));\n  }, [isGameInProgress]);\n  return __jsx(GameInfoWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Time Left: \", time)), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Score: \", score)));\n};\n\nconst GameInfoWrapper = styled.div.withConfig({\n  displayName: \"GameInfo__GameInfoWrapper\",\n  componentId: \"sc-6ty09z-0\"\n})([\"display:flex;align-items:center;justify-content:space-between;\"]);\nexport default GameInfo;","map":{"version":3,"sources":["/app/components/GameInfo/GameInfo.js"],"names":["React","useEffect","useState","styled","useDispatch","useIsGameProgress","useScoreSelector","useTimeSelector","decreaseTimeAction","setIsUserPlayingAction","gameOverAction","ONE_SECOND","GameInfo","dispatch","score","time","isGameInProgress","intervalId","setIntervalId","discreaseTime","clearInterval","setInterval","GameInfoWrapper","div"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,2BAAlD;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,cAHF,QAIO,iCAJP;AAMA,MAAMC,UAAU,GAAG,IAAnB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,KAAK,GAAGR,gBAAgB,EAA9B;AACA,QAAMS,IAAI,GAAGR,eAAe,EAA5B;AACA,QAAMS,gBAAgB,GAAGX,iBAAiB,EAA1C;AAEA,QAAM;AAAA,OAACY,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,IAAD,CAA5C;;AAEA,QAAMiB,aAAa,GAAG,MAAM;AAC1B,QAAIL,KAAK,KAAK,CAAd,EAAiB;AACfD,MAAAA,QAAQ,CAACH,cAAc,EAAf,CAAR;AACD;;AAEDG,IAAAA,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;AACD,GAND;;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACe,gBAAL,EAAuB;AACrBI,MAAAA,aAAa,CAACH,UAAD,CAAb;AACAJ,MAAAA,QAAQ,CAACJ,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AAEA;AACD;;AAEDS,IAAAA,aAAa,CAACG,WAAW,CAACF,aAAD,EAAgBR,UAAhB,CAAZ,CAAb;AACD,GATQ,EASN,CAACK,gBAAD,CATM,CAAT;AAWA,SACE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBD,IAAhB,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAYD,KAAZ,CADF,CAJF,CADF;AAUD,CArCD;;AAuCA,MAAMQ,eAAe,GAAGnB,MAAM,CAACoB,GAAV;AAAA;AAAA;AAAA,sEAArB;AAMA,eAAeX,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useDispatch } from 'react-redux'\n\nimport { useIsGameProgress } from '../../hooks/useIsGameInProgress'\nimport { useScoreSelector, useTimeSelector } from '../../redux/reducers/game'\nimport {\n  decreaseTimeAction,\n  setIsUserPlayingAction,\n  gameOverAction,\n} from '../../redux/actions/gameActions'\n\nconst ONE_SECOND = 1000\n\nconst GameInfo = () => {\n  const dispatch = useDispatch()\n  const score = useScoreSelector()\n  const time = useTimeSelector()\n  const isGameInProgress = useIsGameProgress()\n\n  const [intervalId, setIntervalId] = useState(null)\n\n  const discreaseTime = () => {\n    if (score === 0) {\n      dispatch(gameOverAction())\n    }\n\n    dispatch(decreaseTimeAction())\n  }\n\n  useEffect(() => {\n    if (!isGameInProgress) {\n      clearInterval(intervalId)\n      dispatch(setIsUserPlayingAction(false))\n\n      return\n    }\n\n    setIntervalId(setInterval(discreaseTime, ONE_SECOND))\n  }, [isGameInProgress])\n\n  return (\n    <GameInfoWrapper>\n      <div>\n        <h3>Time Left: {time}</h3>\n      </div>\n      <div>\n        <h3>Score: {score}</h3>\n      </div>\n    </GameInfoWrapper>\n  )\n}\n\nconst GameInfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\n\nexport default GameInfo\n"]},"metadata":{},"sourceType":"module"}