{"ast":null,"code":"var _jsxFileName = \"/app/components/GameInput/GameInput.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { useCurrentWordSelector } from '../../redux/reducers/game';\nimport { useIsGameProgress } from '../../hooks/useIsGameInProgress';\nimport { getRandomWord } from '../../utils/WordGenerator';\nimport { increaseScoreAction, setCurrentWordAction, setIsUserPlayingAction, resetTimeAction } from '../../redux/actions/gameActions';\nconst INPUT_VALUE_DEFAULT = 'Start typing...';\n\nconst GameInput = () => {\n  const dispatch = useDispatch();\n  const currenWord = useCurrentWordSelector();\n  const isGameInProgress = useIsGameProgress();\n  const {\n    0: inputWord,\n    1: setInputWord\n  } = useState();\n\n  const clearInput = () => {\n    setInputWord('');\n  };\n\n  const handleChange = value => {\n    setInputWord(value);\n    const isValueSameCurrentWord = currenWord === value;\n\n    if (!isValueSameCurrentWord) {\n      return;\n    }\n\n    clearInput();\n\n    if (!isGameInProgress) {\n      const newWord = getRandomWord();\n      dispatch(setIsUserPlayingAction(true));\n      dispatch(setCurrentWordAction(newWord));\n      return;\n    }\n\n    dispatch(increaseScoreAction());\n    dispatch(resetTimeAction());\n  };\n\n  return __jsx(GameInputWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    autoFocus: true,\n    variant: \"outlined\",\n    placeholder: INPUT_VALUE_DEFAULT,\n    onChange: event => handleChange(event.target.value),\n    value: inputWord,\n    inputProps: {\n      min: 0,\n      style: {\n        textAlign: 'center' // color: theme.colors.primaryBlue,\n\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst GameInputWrapper = styled.div.withConfig({\n  displayName: \"GameInput__GameInputWrapper\",\n  componentId: \"ti0q1s-0\"\n})([\"display:flex;align-items:center;justify-content:center;margin-top:1rem;\"]);\nexport default GameInput;","map":{"version":3,"sources":["/app/components/GameInput/GameInput.js"],"names":["React","useState","useDispatch","TextField","styled","useCurrentWordSelector","useIsGameProgress","getRandomWord","increaseScoreAction","setCurrentWordAction","setIsUserPlayingAction","resetTimeAction","INPUT_VALUE_DEFAULT","GameInput","dispatch","currenWord","isGameInProgress","inputWord","setInputWord","clearInput","handleChange","value","isValueSameCurrentWord","newWord","event","target","min","style","textAlign","GameInputWrapper","div"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,SACEC,mBADF,EAEEC,oBAFF,EAGEC,sBAHF,EAIEC,eAJF,QAKO,iCALP;AAOA,MAAMC,mBAAmB,GAAG,iBAA5B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAMa,UAAU,GAAGV,sBAAsB,EAAzC;AACA,QAAMW,gBAAgB,GAAGV,iBAAiB,EAA1C;AAEA,QAAM;AAAA,OAACW,SAAD;AAAA,OAAYC;AAAZ,MAA4BjB,QAAQ,EAA1C;;AAEA,QAAMkB,UAAU,GAAG,MAAM;AACvBD,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAFD;;AAIA,QAAME,YAAY,GAAIC,KAAD,IAAW;AAC9BH,IAAAA,YAAY,CAACG,KAAD,CAAZ;AAEA,UAAMC,sBAAsB,GAAGP,UAAU,KAAKM,KAA9C;;AAEA,QAAI,CAACC,sBAAL,EAA6B;AAC3B;AACD;;AAEDH,IAAAA,UAAU;;AAEV,QAAI,CAACH,gBAAL,EAAuB;AACrB,YAAMO,OAAO,GAAGhB,aAAa,EAA7B;AAEAO,MAAAA,QAAQ,CAACJ,sBAAsB,CAAC,IAAD,CAAvB,CAAR;AACAI,MAAAA,QAAQ,CAACL,oBAAoB,CAACc,OAAD,CAArB,CAAR;AAEA;AACD;;AAEDT,IAAAA,QAAQ,CAACN,mBAAmB,EAApB,CAAR;AACAM,IAAAA,QAAQ,CAACH,eAAe,EAAhB,CAAR;AACD,GAtBD;;AAwBA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,WAAW,EAAEC,mBAHf;AAIE,IAAA,QAAQ,EAAGY,KAAD,IAAWJ,YAAY,CAACI,KAAK,CAACC,MAAN,CAAaJ,KAAd,CAJnC;AAKE,IAAA,KAAK,EAAEJ,SALT;AAME,IAAA,UAAU,EAAE;AACVS,MAAAA,GAAG,EAAE,CADK;AAEVC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE,QADN,CAEL;;AAFK;AAFG,KANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAmBD,CAvDD;;AAyDA,MAAMC,gBAAgB,GAAGzB,MAAM,CAAC0B,GAAV;AAAA;AAAA;AAAA,+EAAtB;AAOA,eAAejB,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { TextField } from '@material-ui/core'\nimport styled from 'styled-components'\n\nimport { useCurrentWordSelector } from '../../redux/reducers/game'\nimport { useIsGameProgress } from '../../hooks/useIsGameInProgress'\nimport { getRandomWord } from '../../utils/WordGenerator'\n\nimport {\n  increaseScoreAction,\n  setCurrentWordAction,\n  setIsUserPlayingAction,\n  resetTimeAction,\n} from '../../redux/actions/gameActions'\n\nconst INPUT_VALUE_DEFAULT = 'Start typing...'\n\nconst GameInput = () => {\n  const dispatch = useDispatch()\n\n  const currenWord = useCurrentWordSelector()\n  const isGameInProgress = useIsGameProgress()\n\n  const [inputWord, setInputWord] = useState()\n\n  const clearInput = () => {\n    setInputWord('')\n  }\n\n  const handleChange = (value) => {\n    setInputWord(value)\n\n    const isValueSameCurrentWord = currenWord === value\n\n    if (!isValueSameCurrentWord) {\n      return\n    }\n\n    clearInput()\n\n    if (!isGameInProgress) {\n      const newWord = getRandomWord()\n\n      dispatch(setIsUserPlayingAction(true))\n      dispatch(setCurrentWordAction(newWord))\n\n      return\n    }\n\n    dispatch(increaseScoreAction())\n    dispatch(resetTimeAction())\n  }\n\n  return (\n    <GameInputWrapper>\n      {/* TODO: Change color of input */}\n      <TextField\n        autoFocus\n        variant=\"outlined\"\n        placeholder={INPUT_VALUE_DEFAULT}\n        onChange={(event) => handleChange(event.target.value)}\n        value={inputWord}\n        inputProps={{\n          min: 0,\n          style: {\n            textAlign: 'center',\n            // color: theme.colors.primaryBlue,\n          },\n        }}\n      />\n    </GameInputWrapper>\n  )\n}\n\nconst GameInputWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 1rem;\n`\n\nexport default GameInput\n"]},"metadata":{},"sourceType":"module"}