{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/marekmika/develop/personal/wordbeater/frontend/components/GameInput/GameInput.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { Input } from \"@material-ui/core\";\nimport { increaseScore } from \"../../redux/actions/gameActions\";\nimport { useCurrentWordSelector } from \"../../redux/reducers/game\";\nvar INPUT_VALUE_DEFAULT = \"Start typing...\";\n\nvar GameInput = function GameInput() {\n  _s();\n\n  var theme = useTheme();\n  var dispatch = useDispatch();\n  var currenWord = useCurrentWordSelector();\n\n  var _useState = useState(),\n      inputWord = _useState[0],\n      setInputWord = _useState[1];\n\n  var clearInput = function clearInput() {\n    setInputWord(\"\");\n  };\n\n  var handleChange = function handleChange(value) {\n    setInputWord(value);\n    var isValueSameCurrentWord = currenWord === value;\n\n    if (!isValueSameCurrentWord) {\n      return;\n    }\n\n    clearInput();\n    dispatch(increaseScore());\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Input, {\n    type: \"text\",\n    defaultValue: INPUT_VALUE_DEFAULT,\n    name: \"wordInput\",\n    autoFocus: true,\n    variant: \"outlined\",\n    onChange: function onChange(event) {\n      return handleChange(event.target.value);\n    },\n    value: inputWord,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(GameInput, \"eWX3EF/Q/jpX2djGSb3t94/5718=\", false, function () {\n  return [useTheme, useDispatch, useCurrentWordSelector];\n});\n\n_c = GameInput;\nexport default GameInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameInput\");","map":{"version":3,"sources":["/home/marekmika/develop/personal/wordbeater/frontend/components/GameInput/GameInput.js"],"names":["React","useState","useTheme","useDispatch","Input","increaseScore","useCurrentWordSelector","INPUT_VALUE_DEFAULT","GameInput","theme","dispatch","currenWord","inputWord","setInputWord","clearInput","handleChange","value","isValueSameCurrentWord","event","target"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AAEA,IAAMC,mBAAmB,GAAG,iBAA5B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACtB,MAAMC,KAAK,GAAGP,QAAQ,EAAtB;AAEA,MAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,UAAU,GAAGL,sBAAsB,EAAzC;;AAJsB,kBAMYL,QAAQ,EANpB;AAAA,MAMfW,SANe;AAAA,MAMJC,YANI;;AAQtB,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBD,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAFD;;AAIA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9BH,IAAAA,YAAY,CAACG,KAAD,CAAZ;AAEA,QAAMC,sBAAsB,GAAGN,UAAU,KAAKK,KAA9C;;AAEA,QAAI,CAACC,sBAAL,EAA6B;AAC3B;AACD;;AAEDH,IAAAA,UAAU;AACVJ,IAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACD,GAXD;;AAaA,SACE,4BACE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,YAAY,EAAEE,mBAFhB;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAC,UALV;AAME,IAAA,QAAQ,EAAE,kBAACW,KAAD;AAAA,aAAWH,YAAY,CAACG,KAAK,CAACC,MAAN,CAAaH,KAAd,CAAvB;AAAA,KANZ;AAOE,IAAA,KAAK,EAAEJ,SAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAaD,CAtCD;;GAAMJ,S;UACUN,Q,EAEGC,W,EACEG,sB;;;KAJfE,S;AAwCN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { Input } from \"@material-ui/core\";\n\nimport { increaseScore } from \"../../redux/actions/gameActions\";\nimport { useCurrentWordSelector } from \"../../redux/reducers/game\";\n\nconst INPUT_VALUE_DEFAULT = \"Start typing...\";\n\nconst GameInput = () => {\n  const theme = useTheme();\n\n  const dispatch = useDispatch();\n  const currenWord = useCurrentWordSelector();\n\n  const [inputWord, setInputWord] = useState();\n\n  const clearInput = () => {\n    setInputWord(\"\");\n  };\n\n  const handleChange = (value) => {\n    setInputWord(value);\n\n    const isValueSameCurrentWord = currenWord === value;\n\n    if (!isValueSameCurrentWord) {\n      return;\n    }\n\n    clearInput();\n    dispatch(increaseScore());\n  };\n\n  return (\n    <>\n      <Input\n        type=\"text\"\n        defaultValue={INPUT_VALUE_DEFAULT}\n        name=\"wordInput\"\n        autoFocus\n        variant=\"outlined\"\n        onChange={(event) => handleChange(event.target.value)}\n        value={inputWord}\n      />\n    </>\n  );\n};\n\nexport default GameInput;\n"]},"metadata":{},"sourceType":"module"}